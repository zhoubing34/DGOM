dnl Process this m4 file to produce 'C' language file.
dnl
dnl If you see this line, you can ignore the next one.
! Do not edit this file. It is produced from the corresponding .m4 source
dnl
!
!  Copyright (C) 2014, Northwestern University and Argonne National Laboratory
!  See COPYRIGHT notice in top-level directory.
!
! $Id: getput_vard.m4 2221 2015-12-12 00:39:15Z wkliao $
!

dnl
dnl VARD1(ncid, varid, filetype, buf, bufcount, buftype)
dnl
define(`VARD1',dnl
`dnl
   function nf90mpi_$1_vard_$3$6(ncid, varid, filetype, buf, bufcount, buftype)
     integer,                        intent(in) :: ncid, varid
     integer,                        intent(in) :: filetype
     $4 (kind=$3),                   intent($2) :: buf
     integer (kind=MPI_OFFSET_KIND), intent(in) :: bufcount
     integer,                        intent(in) :: buftype
     integer                                    :: nf90mpi_$1_vard_$3$6
     nf90mpi_$1_vard_$3$6 = nfmpi_$1_vard$6(ncid, varid, filetype, buf, bufcount, buftype)
   end function nf90mpi_$1_vard_$3$6
')dnl

!
! Independent put APIs
!

VARD1(put, INTENTV, OneByteInt,    integer, int1)
VARD1(put, INTENTV, TwoByteInt,    integer, int2)
VARD1(put, INTENTV, FourByteInt,   integer, int)
VARD1(put, INTENTV, FourByteReal,  real,    real)
VARD1(put, INTENTV, EightByteReal, real,    double)
VARD1(put, INTENTV, EightByteInt,  integer, int8)

!
! Independent get APIs
!

VARD1(get, out, OneByteInt,    integer, int1)
VARD1(get, out, TwoByteInt,    integer, int2)
VARD1(get, out, FourByteInt,   integer, int)
VARD1(get, out, FourByteReal,  real,    real)
VARD1(get, out, EightByteReal, real,    double)
VARD1(get, out, EightByteInt,  integer, int8)

!
! Collective put APIs
!

VARD1(put, INTENTV, OneByteInt,    integer, int1,   _all)
VARD1(put, INTENTV, TwoByteInt,    integer, int2,   _all)
VARD1(put, INTENTV, FourByteInt,   integer, int,    _all)
VARD1(put, INTENTV, FourByteReal,  real,    real,   _all)
VARD1(put, INTENTV, EightByteReal, real,    double, _all)
VARD1(put, INTENTV, EightByteInt,  integer, int8,   _all)

!
! Collective get APIs
!

VARD1(get, out, OneByteInt,    integer, int1,   _all)
VARD1(get, out, TwoByteInt,    integer, int2,   _all)
VARD1(get, out, FourByteInt,   integer, int,    _all)
VARD1(get, out, FourByteReal,  real,    real,   _all)
VARD1(get, out, EightByteReal, real,    double, _all)
VARD1(get, out, EightByteInt,  integer, int8,   _all)


dnl
dnl VARD(ncid, varid, values, num, start, count)
dnl
define(`VARD',dnl
`dnl
   function nf90mpi_$1_vard_$2_$3$8(ncid, varid, filetype, buf, bufcount, buftype)
     integer,                        intent(in) :: ncid, varid
     integer,                        intent(in) :: filetype
     $4 (kind=$3),   dimension($6),  intent($7) :: buf
     integer (kind=MPI_OFFSET_KIND), intent(in) :: bufcount
     integer,                        intent(in) :: buftype
     integer                                    :: nf90mpi_$1_vard_$2_$3$8
     nf90mpi_$1_vard_$2_$3$8 = nfmpi_$1_vard$8(ncid, varid, filetype, buf, bufcount, buftype)
   end function nf90mpi_$1_vard_$2_$3$8
')dnl

!
! put APIs
!

VARD(put, 1D, OneByteInt, integer, int1,  :,              in)
VARD(put, 2D, OneByteInt, integer, int1, `:,:',           in)
VARD(put, 3D, OneByteInt, integer, int1, `:,:,:',         in)
VARD(put, 4D, OneByteInt, integer, int1, `:,:,:,:',       in)
VARD(put, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     in)
VARD(put, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   in)
VARD(put, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', in)

VARD(put, 1D, TwoByteInt, integer, int2,  :,              INTENTV)
VARD(put, 2D, TwoByteInt, integer, int2, `:,:',           INTENTV)
VARD(put, 3D, TwoByteInt, integer, int2, `:,:,:',         INTENTV)
VARD(put, 4D, TwoByteInt, integer, int2, `:,:,:,:',       INTENTV)
VARD(put, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     INTENTV)
VARD(put, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   INTENTV)
VARD(put, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', INTENTV)

VARD(put, 1D, FourByteInt, integer, int,  :,              INTENTV)
VARD(put, 2D, FourByteInt, integer, int, `:,:',           INTENTV)
VARD(put, 3D, FourByteInt, integer, int, `:,:,:',         INTENTV)
VARD(put, 4D, FourByteInt, integer, int, `:,:,:,:',       INTENTV)
VARD(put, 5D, FourByteInt, integer, int, `:,:,:,:,:',     INTENTV)
VARD(put, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   INTENTV)
VARD(put, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', INTENTV)

VARD(put, 1D, FourByteReal, real,   real,  :,              INTENTV)
VARD(put, 2D, FourByteReal, real,   real, `:,:',           INTENTV)
VARD(put, 3D, FourByteReal, real,   real, `:,:,:',         INTENTV)
VARD(put, 4D, FourByteReal, real,   real, `:,:,:,:',       INTENTV)
VARD(put, 5D, FourByteReal, real,   real, `:,:,:,:,:',     INTENTV)
VARD(put, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   INTENTV)
VARD(put, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', INTENTV)

VARD(put, 1D, EightByteReal, real, double,  :,              INTENTV)
VARD(put, 2D, EightByteReal, real, double, `:,:',           INTENTV)
VARD(put, 3D, EightByteReal, real, double, `:,:,:',         INTENTV)
VARD(put, 4D, EightByteReal, real, double, `:,:,:,:',       INTENTV)
VARD(put, 5D, EightByteReal, real, double, `:,:,:,:,:',     INTENTV)
VARD(put, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   INTENTV)
VARD(put, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', INTENTV)

VARD(put, 1D, EightByteInt, integer, int8,  :,              INTENTV)
VARD(put, 2D, EightByteInt, integer, int8, `:,:',           INTENTV)
VARD(put, 3D, EightByteInt, integer, int8, `:,:,:',         INTENTV)
VARD(put, 4D, EightByteInt, integer, int8, `:,:,:,:',       INTENTV)
VARD(put, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     INTENTV)
VARD(put, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   INTENTV)
VARD(put, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', INTENTV)

!
! get APIs
!

VARD(get, 1D, OneByteInt, integer, int1,  :,              out)
VARD(get, 2D, OneByteInt, integer, int1, `:,:',           out)
VARD(get, 3D, OneByteInt, integer, int1, `:,:,:',         out)
VARD(get, 4D, OneByteInt, integer, int1, `:,:,:,:',       out)
VARD(get, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     out)
VARD(get, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   out)
VARD(get, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', out)

VARD(get, 1D, TwoByteInt, integer, int2,  :,              out)
VARD(get, 2D, TwoByteInt, integer, int2, `:,:',           out)
VARD(get, 3D, TwoByteInt, integer, int2, `:,:,:',         out)
VARD(get, 4D, TwoByteInt, integer, int2, `:,:,:,:',       out)
VARD(get, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     out)
VARD(get, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   out)
VARD(get, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', out)

VARD(get, 1D, FourByteInt, integer, int,  :,              out)
VARD(get, 2D, FourByteInt, integer, int, `:,:',           out)
VARD(get, 3D, FourByteInt, integer, int, `:,:,:',         out)
VARD(get, 4D, FourByteInt, integer, int, `:,:,:,:',       out)
VARD(get, 5D, FourByteInt, integer, int, `:,:,:,:,:',     out)
VARD(get, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   out)
VARD(get, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', out)

VARD(get, 1D, FourByteReal, real,   real,  :,              out)
VARD(get, 2D, FourByteReal, real,   real, `:,:',           out)
VARD(get, 3D, FourByteReal, real,   real, `:,:,:',         out)
VARD(get, 4D, FourByteReal, real,   real, `:,:,:,:',       out)
VARD(get, 5D, FourByteReal, real,   real, `:,:,:,:,:',     out)
VARD(get, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   out)
VARD(get, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', out)

VARD(get, 1D, EightByteReal, real, double,  :,              out)
VARD(get, 2D, EightByteReal, real, double, `:,:',           out)
VARD(get, 3D, EightByteReal, real, double, `:,:,:',         out)
VARD(get, 4D, EightByteReal, real, double, `:,:,:,:',       out)
VARD(get, 5D, EightByteReal, real, double, `:,:,:,:,:',     out)
VARD(get, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   out)
VARD(get, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', out)

VARD(get, 1D, EightByteInt, integer, int8,  :,              out)
VARD(get, 2D, EightByteInt, integer, int8, `:,:',           out)
VARD(get, 3D, EightByteInt, integer, int8, `:,:,:',         out)
VARD(get, 4D, EightByteInt, integer, int8, `:,:,:,:',       out)
VARD(get, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     out)
VARD(get, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   out)
VARD(get, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', out)

!
! collective put APIs
!

VARD(put, 1D, OneByteInt, integer, int1,  :,              in, _all)
VARD(put, 2D, OneByteInt, integer, int1, `:,:',           in, _all)
VARD(put, 3D, OneByteInt, integer, int1, `:,:,:',         in, _all)
VARD(put, 4D, OneByteInt, integer, int1, `:,:,:,:',       in, _all)
VARD(put, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     in, _all)
VARD(put, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   in, _all)
VARD(put, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', in, _all)

VARD(put, 1D, TwoByteInt, integer, int2,  :,              INTENTV, _all)
VARD(put, 2D, TwoByteInt, integer, int2, `:,:',           INTENTV, _all)
VARD(put, 3D, TwoByteInt, integer, int2, `:,:,:',         INTENTV, _all)
VARD(put, 4D, TwoByteInt, integer, int2, `:,:,:,:',       INTENTV, _all)
VARD(put, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     INTENTV, _all)
VARD(put, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   INTENTV, _all)
VARD(put, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', INTENTV, _all)

VARD(put, 1D, FourByteInt, integer, int,  :,              INTENTV, _all)
VARD(put, 2D, FourByteInt, integer, int, `:,:',           INTENTV, _all)
VARD(put, 3D, FourByteInt, integer, int, `:,:,:',         INTENTV, _all)
VARD(put, 4D, FourByteInt, integer, int, `:,:,:,:',       INTENTV, _all)
VARD(put, 5D, FourByteInt, integer, int, `:,:,:,:,:',     INTENTV, _all)
VARD(put, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   INTENTV, _all)
VARD(put, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', INTENTV, _all)

VARD(put, 1D, FourByteReal, real,   real,  :,              INTENTV, _all)
VARD(put, 2D, FourByteReal, real,   real, `:,:',           INTENTV, _all)
VARD(put, 3D, FourByteReal, real,   real, `:,:,:',         INTENTV, _all)
VARD(put, 4D, FourByteReal, real,   real, `:,:,:,:',       INTENTV, _all)
VARD(put, 5D, FourByteReal, real,   real, `:,:,:,:,:',     INTENTV, _all)
VARD(put, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   INTENTV, _all)
VARD(put, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', INTENTV, _all)

VARD(put, 1D, EightByteReal, real, double,  :,              INTENTV, _all)
VARD(put, 2D, EightByteReal, real, double, `:,:',           INTENTV, _all)
VARD(put, 3D, EightByteReal, real, double, `:,:,:',         INTENTV, _all)
VARD(put, 4D, EightByteReal, real, double, `:,:,:,:',       INTENTV, _all)
VARD(put, 5D, EightByteReal, real, double, `:,:,:,:,:',     INTENTV, _all)
VARD(put, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   INTENTV, _all)
VARD(put, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', INTENTV, _all)

VARD(put, 1D, EightByteInt, integer, int8,  :,              INTENTV, _all)
VARD(put, 2D, EightByteInt, integer, int8, `:,:',           INTENTV, _all)
VARD(put, 3D, EightByteInt, integer, int8, `:,:,:',         INTENTV, _all)
VARD(put, 4D, EightByteInt, integer, int8, `:,:,:,:',       INTENTV, _all)
VARD(put, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     INTENTV, _all)
VARD(put, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   INTENTV, _all)
VARD(put, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', INTENTV, _all)

!
! collective get APIs
!

VARD(get, 1D, OneByteInt, integer, int1,  :,              out, _all)
VARD(get, 2D, OneByteInt, integer, int1, `:,:',           out, _all)
VARD(get, 3D, OneByteInt, integer, int1, `:,:,:',         out, _all)
VARD(get, 4D, OneByteInt, integer, int1, `:,:,:,:',       out, _all)
VARD(get, 5D, OneByteInt, integer, int1, `:,:,:,:,:',     out, _all)
VARD(get, 6D, OneByteInt, integer, int1, `:,:,:,:,:,:',   out, _all)
VARD(get, 7D, OneByteInt, integer, int1, `:,:,:,:,:,:,:', out, _all)

VARD(get, 1D, TwoByteInt, integer, int2,  :,              out, _all)
VARD(get, 2D, TwoByteInt, integer, int2, `:,:',           out, _all)
VARD(get, 3D, TwoByteInt, integer, int2, `:,:,:',         out, _all)
VARD(get, 4D, TwoByteInt, integer, int2, `:,:,:,:',       out, _all)
VARD(get, 5D, TwoByteInt, integer, int2, `:,:,:,:,:',     out, _all)
VARD(get, 6D, TwoByteInt, integer, int2, `:,:,:,:,:,:',   out, _all)
VARD(get, 7D, TwoByteInt, integer, int2, `:,:,:,:,:,:,:', out, _all)

VARD(get, 1D, FourByteInt, integer, int,  :,              out, _all)
VARD(get, 2D, FourByteInt, integer, int, `:,:',           out, _all)
VARD(get, 3D, FourByteInt, integer, int, `:,:,:',         out, _all)
VARD(get, 4D, FourByteInt, integer, int, `:,:,:,:',       out, _all)
VARD(get, 5D, FourByteInt, integer, int, `:,:,:,:,:',     out, _all)
VARD(get, 6D, FourByteInt, integer, int, `:,:,:,:,:,:',   out, _all)
VARD(get, 7D, FourByteInt, integer, int, `:,:,:,:,:,:,:', out, _all)

VARD(get, 1D, FourByteReal, real,   real,  :,              out, _all)
VARD(get, 2D, FourByteReal, real,   real, `:,:',           out, _all)
VARD(get, 3D, FourByteReal, real,   real, `:,:,:',         out, _all)
VARD(get, 4D, FourByteReal, real,   real, `:,:,:,:',       out, _all)
VARD(get, 5D, FourByteReal, real,   real, `:,:,:,:,:',     out, _all)
VARD(get, 6D, FourByteReal, real,   real, `:,:,:,:,:,:',   out, _all)
VARD(get, 7D, FourByteReal, real,   real, `:,:,:,:,:,:,:', out, _all)

VARD(get, 1D, EightByteReal, real, double,  :,              out, _all)
VARD(get, 2D, EightByteReal, real, double, `:,:',           out, _all)
VARD(get, 3D, EightByteReal, real, double, `:,:,:',         out, _all)
VARD(get, 4D, EightByteReal, real, double, `:,:,:,:',       out, _all)
VARD(get, 5D, EightByteReal, real, double, `:,:,:,:,:',     out, _all)
VARD(get, 6D, EightByteReal, real, double, `:,:,:,:,:,:',   out, _all)
VARD(get, 7D, EightByteReal, real, double, `:,:,:,:,:,:,:', out, _all)

VARD(get, 1D, EightByteInt, integer, int8,  :,              out, _all)
VARD(get, 2D, EightByteInt, integer, int8, `:,:',           out, _all)
VARD(get, 3D, EightByteInt, integer, int8, `:,:,:',         out, _all)
VARD(get, 4D, EightByteInt, integer, int8, `:,:,:,:',       out, _all)
VARD(get, 5D, EightByteInt, integer, int8, `:,:,:,:,:',     out, _all)
VARD(get, 6D, EightByteInt, integer, int8, `:,:,:,:,:,:',   out, _all)
VARD(get, 7D, EightByteInt, integer, int8, `:,:,:,:,:,:,:', out, _all)

!
! text variable
!

dnl
dnl TEXTVARD1(ncid, varid, values, num, start, count)
dnl
define(`TEXTVARD1',dnl
`dnl
   function nf90mpi_$1_vard_text$3(ncid, varid, filetype, buf, bufcount, buftype)
     integer,                        intent(in) :: ncid, varid
     integer,                        intent(in) :: filetype
     character (len = *),            intent($2) :: buf
     integer (kind=MPI_OFFSET_KIND), intent(in) :: bufcount
     integer,                        intent(in) :: buftype
     integer                                    :: nf90mpi_$1_vard_text$3
     nf90mpi_$1_vard_text$3 = nfmpi_$1_vard$3(ncid, varid, filetype, buf, bufcount, buftype)
   end function nf90mpi_$1_vard_text$3
')dnl

TEXTVARD1(put, in)
TEXTVARD1(get, out)

TEXTVARD1(put, in, _all)
TEXTVARD1(get, out, _all)

dnl
dnl TEXTVARD(ncid, varid, values, num, start, count)
dnl
define(`TEXTVARD',dnl
`dnl
   function nf90mpi_$1_vard_$2_text$6(ncid, varid, filetype, buf, bufcount, buftype)
     integer,                            intent(in) :: ncid, varid
     integer,                            intent(in) :: filetype
     character (len = *), dimension($3), intent($5) :: buf
     integer (kind=MPI_OFFSET_KIND),     intent(in) :: bufcount
     integer,                            intent(in) :: buftype
     integer                                        :: nf90mpi_$1_vard_$2_text$6
     nf90mpi_$1_vard_$2_text$6 = nfmpi_$1_vard$6(ncid, varid, filetype, buf($4), bufcount, buftype)
   end function nf90mpi_$1_vard_$2_text$6
')dnl

TEXTVARD(put, 1D,  :,               1,              in)
TEXTVARD(put, 2D, `:,:',           `1,1',           in)
TEXTVARD(put, 3D, `:,:,:',         `1,1,1',         in)
TEXTVARD(put, 4D, `:,:,:,:',       `1,1,1,1',       in)
TEXTVARD(put, 5D, `:,:,:,:,:',     `1,1,1,1,1',     in)
TEXTVARD(put, 6D, `:,:,:,:,:,:',   `1,1,1,1,1,1',   in)
TEXTVARD(put, 7D, `:,:,:,:,:,:,:', `1,1,1,1,1,1,1', in)

TEXTVARD(get, 1D,  :,               1,              out)
TEXTVARD(get, 2D, `:,:',           `1,1',           out)
TEXTVARD(get, 3D, `:,:,:',         `1,1,1',         out)
TEXTVARD(get, 4D, `:,:,:,:',       `1,1,1,1',       out)
TEXTVARD(get, 5D, `:,:,:,:,:',     `1,1,1,1,1',     out)
TEXTVARD(get, 6D, `:,:,:,:,:,:',   `1,1,1,1,1,1',   out)
TEXTVARD(get, 7D, `:,:,:,:,:,:,:', `1,1,1,1,1,1,1', out)

!
! Collective APIs
!

TEXTVARD(put, 1D,  :,               1,              in, _all)
TEXTVARD(put, 2D, `:,:',           `1,1',           in, _all)
TEXTVARD(put, 3D, `:,:,:',         `1,1,1',         in, _all)
TEXTVARD(put, 4D, `:,:,:,:',       `1,1,1,1',       in, _all)
TEXTVARD(put, 5D, `:,:,:,:,:',     `1,1,1,1,1',     in, _all)
TEXTVARD(put, 6D, `:,:,:,:,:,:',   `1,1,1,1,1,1',   in, _all)
TEXTVARD(put, 7D, `:,:,:,:,:,:,:', `1,1,1,1,1,1,1', in, _all)

TEXTVARD(get, 1D,  :,               1,              out, _all)
TEXTVARD(get, 2D, `:,:',           `1,1',           out, _all)
TEXTVARD(get, 3D, `:,:,:',         `1,1,1',         out, _all)
TEXTVARD(get, 4D, `:,:,:,:',       `1,1,1,1',       out, _all)
TEXTVARD(get, 5D, `:,:,:,:,:',     `1,1,1,1,1',     out, _all)
TEXTVARD(get, 6D, `:,:,:,:,:,:',   `1,1,1,1,1,1',   out, _all)
TEXTVARD(get, 7D, `:,:,:,:,:,:,:', `1,1,1,1,1,1,1', out, _all)

